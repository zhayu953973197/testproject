#include "base_datatype_def.txt"















typedef unsigned int td_u32;
typedef int td_s32;
typedef unsigned short td_u16;
typedef signed short td_s16;
typedef unsigned char td_u8;
typedef signed char td_s8;
typedef void td_void;
typedef char td_char;
typedef unsigned char td_uchar;
typedef td_u8 td_bool;
typedef void *td_pvoid;
typedef td_u8 td_byte;
typedef td_pvoid td_handle;
typedef td_byte *td_pbyte;
typedef float td_float;
typedef double td_double;
typedef volatile td_u32 td_u32_reg;
typedef td_pvoid td_func_ptr;
typedef td_u32 td_func;
typedef unsigned int td_size_t;
typedef int td_ssize_t;
typedef int td_offset_t;
typedef unsigned int uintptr_t;
typedef int intptr_t;
typedef const td_char *td_pcstr;
typedef unsigned long long td_u64;
typedef long long td_s64;
typedef struct {
    td_u32 msg_id;
    uintptr_t param[4];
} ext_sys_queue_msg;
typedef struct {
    td_u32 lo;
    td_u32 hi;
} ext_obj64;





typedef struct {
    td_u32 major_minor_version;
    td_u32 revision_version;
    td_u32 build_version;
} ext_ue_soft_version;







typedef struct {
    td_u16 v_ver_no;
    td_u16 r_ver_no;
    td_u16 c_ver_no;
    td_u16 b_ver_no;
    td_u16 spc_no;
    td_u16 custom_ver;
    td_u32 product_no;

    td_char ac_build_date[10];
    td_char ac_build_time[8];
} ext_ue_build_ver_info;

typedef struct {
    td_u16 version_v;
    td_u16 version_r;
    td_u16 version_c;
    td_u16 version_b;
    td_u16 version_spc;
    td_u16 reserved[3];
} ext_ue_product_ver;






typedef struct {
    td_char *product_version;
    td_char *build_date;
    td_char *build_time;
} ext_product_info;
typedef enum {
    EXT_DMS_LCHL_MODE_LOCAL = 0,
    EXT_DMS_LCHL_MODE_PLC,
    EXT_DMS_LCHL_MODE_MAX
} ext_dms_lchl_mode;

typedef struct {
    td_u16 id;
    td_u8 mode;
    td_u8 ctrl;
    td_u8 discard_old_data : 1;
    td_u8 data_timeout : 1;
    td_u8 rsv0 : 6;
    td_u8 form_serial_number;
    td_u8 dest_mac[EXT_PLC_MAC_ADDR_LEN];
    td_u8 src_mac[EXT_PLC_MAC_ADDR_LEN];
    td_u16 payload_len;
    td_pbyte payload;
} ext_dms_chl_rx;

typedef struct {
    td_u16 idx;
    td_u16 arq_cnt;
    td_u32 err;
} ext_dms_chl_tx_ind;

typedef struct {
    ext_dms_chl_tx_ind chl_tx;
} ext_dms_chl_status_ind;
typedef td_u32 (*ext_dms_chl_connect_f)(td_u16, td_u8);
typedef td_u32 (*ext_dms_chl_msg_ind_f)(td_u16, td_u32, td_pvoid);
typedef td_u32 (*ext_dms_chl_rx_f)(td_u16, const ext_dms_chl_rx *);
typedef td_u32 (*ext_dms_chl_iremote_packet_f)(td_u32, td_pvoid, td_u16);






typedef struct {
    ext_dms_chl_connect_f fn_chl_connect;
    ext_dms_chl_rx_f fn_chl_data_rx;
    ext_dms_chl_msg_ind_f fn_chl_msg_rx;
} ext_dms_chl_port_obj;
typedef struct {
    td_u16 data_size;
    td_u8 inside_info[((sizeof(td_u8) + sizeof(td_u8)) + (4))];
    td_u8 data[0];
} ext_dms_chl_tx_data;
typedef struct {
    td_u16 id;
    td_u8 ctrl;
    td_u8 type;

    td_u8 prio;
    td_u8 max_resend_count;
    td_u8 send_mode;




    td_bool is_stas_commu;
    td_u8 dest_mac[EXT_PLC_MAC_ADDR_LEN];




    td_u8 is_set_send_type;
    td_u8 send_type;
} ext_dms_chl_tx_ctrl;
typedef ext_dms_chl_tx_ctrl ext_dms_chl_tx_addr_s;
typedef struct {
    td_u16 id;
    td_u16 src_mod_id;
    td_u16 dest_mod_id;
    td_u16 data_size;
    td_pvoid data;
} ext_diag_layer_msg;
typedef enum {
    EXT_DFX_MAC_MSG_ROUTER = 0x200,
    EXT_DFX_MAC_MSG_DIAG


} ext_sal_dfx_mac_msg;
typedef struct {
    td_u32 upg_id;
    td_u32 option;

} ext_upg_req_option;

typedef struct {
    td_u16 id;
    td_u16 payload_size;
    td_u8 payload[0];
} ext_diag_packet;
typedef struct {







    td_u8 sys_mode;
    td_u8 boot_ver_idx;
    td_u8 sys_cause;

    td_u8 version_v;
    td_u8 version_r;
    td_u8 version_c;
    td_u8 build_datetime[6];
    td_u16 version_b;
    td_u16 version_spc;
    td_u16 chip_version;



    td_u8 boot_cause;

    td_u8 boot_ver;
    td_u16 sw_ver;
    td_u16 year : 7;
    td_u16 month : 4;
    td_u16 day : 5;
    td_char manu_code[2];
    td_char chip_code[2];
} ext_sys_status_info;

typedef struct {
    td_u8 mac[EXT_PLC_MAC_ADDR_LEN];
    td_u8 product_type;



    td_u8 pad1;

    td_u16 tei : 12;
    td_u16 level : 4;
    td_u16 proxy_tei : 12;
    td_u16 role : 4;

    ext_sys_status_info sta_ver;
} ext_mac_network_topo_entry;

typedef struct {
    td_u8 repeter_level;
    td_pvoid topo;
} ext_mac_config_info;





typedef enum {
    EXT_SYS_ENUM_RST_NO_REQ = 0,
    EXT_SYS_ENUM_RST_DO_PLEASE,
    EXT_SYS_ENUM_RST_NOT_PLEASE,
    EXT_SYS_ENUM_RST_MAX
} ext_sys_rst_component_vote;


typedef struct {
    td_u8 src_mac[EXT_PLC_MAC_ADDR_LEN];
    td_u8 dest_mac[EXT_PLC_MAC_ADDR_LEN];

    td_bool is_exist_mac;
    td_u8 max_resend_count;

    td_u8 lid;
    td_u8 send_mode;

    td_u32 is_set_send_type : 1;
    td_u32 send_type : 3;
    td_u32 is_ee_iv : 1;
    td_u32 pad : 1;
    td_u32 form_serial_number : 8;





    td_u32 use_network_mode : 2;
    td_u32 pad2 : 16;
} dms_mac_frame_ctrl;
typedef struct {
    td_u32 sn;
    td_u16 trans_id;
    td_u16 control : 15;
    td_u16 du_link : 1;

    td_u16 user_data;
    td_u8 prod_type;




    td_u8 transformed : 1;
    td_u8 pad : 7;

    td_u8 mac_addr[EXT_PLC_RELAY_NUM_MAX][EXT_PLC_MAC_ADDR_LEN];
    td_u8 ndm_mac_addr[EXT_PLC_MAC_ADDR_LEN];
} ext_nd_remote_frame_head;




typedef struct {
    td_u32 sn;
    td_u16 trans_id;
    td_u16 control : 15;
    td_u16 du_link : 1;

    td_u16 user_data;
    td_u8 prod_type;
    td_u8 pad;

    td_u16 fragment_id;
    td_u16 fragment_count : 9;

    td_u16 rsb_pkt_flag : 1;

    td_u16 transformed : 1;
    td_u16 pad2 : 5;

    td_u16 fragment_trans_id;
    td_u16 pad3;

    td_u8 mac_addr[EXT_PLC_RELAY_NUM_MAX][EXT_PLC_MAC_ADDR_LEN];
    td_u8 ndm_mac_addr[EXT_PLC_MAC_ADDR_LEN];
} ext_nd_remote_frame_ind_head;
typedef enum {
    EXT_CFG_PERFORMANCE_HIGH,
    EXT_CFG_PERFORMANCE_LOW,
    EXT_CFG_PERFORMANCE_MAX,
} ext_cfg_performance;



typedef enum {
    EXT_FLASH_PARTITON_BOOT = 0,
    EXT_FLASH_PARTITON_FACTORY_NV,
    EXT_FLASH_PARTITON_NV_BACKUP,
    EXT_FLASH_PARTITON_KERNEL,

    EXT_FLASH_PARTITON_UPG_BACKUP,
    EXT_FLASH_PARTITON_NV_FILE,
    EXT_FLASH_PARTITON_CRASH_INFO,
    EXT_FLASH_PARTITON_USER_INFO_1,

    EXT_FLASH_PARTITON_USER_INFO_2,
    EXT_FLASH_PARTITON_USER_INFO_3,
    EXT_FLASH_PARTITON_USER_INFO_4,
    EXT_FLASH_PARTITON_USER_INFO_5,
} ext_flash_partition_table_id;





typedef struct {
    td_u32 boot_support : 1;
    td_u32 reserve : 10;
    td_u32 ver_num : 5;



    td_u32 bitmap : 16;


} ext_partition_ver_info;





typedef struct {
    td_u32 finished_block : 12;
    td_u32 reserve : 12;
    td_u32 id : 5;
    td_u32 move : 1;
    td_u32 top1_or_bottom0 : 2;


} ext_pt_change_status;





typedef struct {
    ext_partition_ver_info ver_support;


    td_u32 temp_area_blk : 12;
    td_u32 total_num : 5;
    td_u32 reserve : 14;
    td_u32 status : 1;
} ext_pt_change_ctrl;





typedef struct {
    td_u8 id : 5;
    td_u8 reserve : 1;
    td_u8 top1_or_bottom0 : 2;
} ext_pt_change_detail;





typedef struct {
    ext_pt_change_ctrl ctrl;
    ext_pt_change_status table[12];
} ext_pt_change_log;





typedef struct {
    td_u32 addr_blk : 12;

    td_u32 size_blk : 12;
    td_u32 pad : 7;
    td_u32 dir : 1;
} ext_flash_partition_info;





typedef struct {
    ext_partition_ver_info ver;
    ext_flash_partition_info table[12];
    td_u32 reserve[2];
} ext_flash_partition_table;





typedef struct {
    ext_flash_partition_table new_info;

    ext_pt_change_ctrl change_ctrl_info;



    ext_pt_change_detail change_item[0];


} ext_flash_partition_chage_info;





typedef enum {
    EXT_PARTITION_VER_THE_SAME = 0,
    EXT_PARTITION_VER_NEW,
    EXT_PARTITION_VER_ERR,
} ext_partition_ver;
td_u32 uapi_flash_partition_init(td_void);
ext_flash_partition_table *uapi_get_partition_table(td_void);
td_u32 uapi_flash_partition_get_ver(ext_partition_ver_info *ver);
ext_partition_ver uapi_flash_partition_check_ver(const ext_partition_ver_info *ver);
td_u32 uapi_flash_partition_config(ext_flash_partition_chage_info *change_info, td_u16 size);






typedef enum {
    EXT_PARTITON_SOFT_RESET = 0,
    EXT_PARTITON_HARD_RESET,
    EXT_PARTITON_NO_RESET,
} ext_partition_reset;
td_u32 uapi_flash_partition_refresh(ext_partition_reset reset);
inline td_bool uapi_is_nv_ftm(td_u16 x)
{
    return (x < 0x19);
}

typedef struct {
    td_char id[3];
    td_char chip_id[5];
} ext_nv_ftm_manufacotr_id;
typedef enum {
    EXT_FTM_PRODUCT_TYPE_UNKOWN = 0,


    EXT_FTM_PRODUCT_TYPE_C01 = 1,
    EXT_FTM_PRODUCT_TYPE_C02,
    EXT_FTM_PRODUCT_TYPE_C03,
    EXT_FTM_PRODUCT_TYPE_C04,
    EXT_FTM_PRODUCT_TYPE_C05,
    EXT_FTM_PRODUCT_TYPE_C06,
    EXT_FTM_PRODUCT_TYPE_C07,
    EXT_FTM_PRODUCT_TYPE_C08,

    EXT_FTM_PRODUCT_TYPE_C60 = 60,


    EXT_FTM_PRODUCT_TYPE_D61 = 61,
    EXT_FTM_PRODUCT_TYPE_D62,
    EXT_FTM_PRODUCT_TYPE_D63,
    EXT_FTM_PRODUCT_TYPE_D64,

    EXT_FTM_PRODUCT_TYPE_D100 = 100,


    EXT_FTM_PRODUCT_TYPE_M101 = 101,
    EXT_FTM_PRODUCT_TYPE_M102,
    EXT_FTM_PRODUCT_TYPE_M103,
    EXT_FTM_PRODUCT_TYPE_M104,
    EXT_FTM_PRODUCT_TYPE_M105,
    EXT_FTM_PRODUCT_TYPE_M106,
    EXT_FTM_PRODUCT_TYPE_M107,
    EXT_FTM_PRODUCT_TYPE_M108,

    EXT_FTM_PRODUCT_TYPE_M8191 = 8191,
} ext_ftm_product_type;

typedef struct {
    ext_ftm_product_type product_type;
    td_u8 plc_mac[6];
    td_u8 reserved[6];
} ext_nv_ftm_product_id;
typedef struct {
    td_u8 data[64];
    td_u32 rsv[16];
} ext_nv_ftm_soc_cfg;

typedef struct {
    td_u32 status;
    td_u32 load_flash_addr;
    td_u32 last_blk_idx;
    td_u32 rcv_file_size;
    td_u32 upg_id;
    td_u32 upg_window_time;
    td_u32 back_times;
    td_u32 runtimes;

    td_u8 upg_target;
    td_u8 test_mode;
    td_u8 decompress_nv;
    td_u8 reserved1[1];

    td_u32 reserved2;
} ext_nv_ftm_startup_cfg;


typedef struct {
    td_u32 option;
    td_u32 upg_id;
    td_u32 file_len;
    td_u32 blk_num;
    td_u32 upg_time_window;
    td_u32 last_block_id;
    td_u32 crc;
} ext_nv_ftm_upg_start_cfg;



typedef struct {
    td_u16 total_number_when_start;
    td_u16 extra_timer_max_count;
    td_u16 extra_timer_period;

    td_u16 upg_verify_new_policy;

    td_u16 total_number_threshold;
    td_u16 rcv_timeout_timer_period;
    td_u16 blk_send_period;
    td_u8 reserved2;
    td_u8 upg_type;
    td_u8 device_upg_status;

    td_u8 transmit_blk_num;
    td_u16 mac_tx_arq_period;
    td_u16 start_tx_period_num;
    td_u16 transmit_blk_resend_num;

    td_u16 broadcast_stop_num;
    td_u16 broadcast_stop_period;

    td_u16 sta_dfx_report;
    td_u16 cco_dfx_report;
    td_u16 broadcast_finish_num;
    td_u16 broadcast_finish_period;
    td_u16 reserved;

    td_u16 whether_upg_test_mode;
} ext_nv_ftm_upg_cfg;

typedef struct _diag_cmd_config_nm_serial_number_ {
    td_u32 form_serial_number;
    td_u32 assoc_random_number;
} diag_cmd_config_nm_serial_number_stru;



typedef struct {
    td_u8 main_network_snid;
    td_u8 init_freq;
    td_u8 sub_network_snid;
    td_u8 network_mode;

    td_u8 network_mode_policy;
    td_u8 preamble_seq_shift_index;
    td_u8 rf_channel;
    td_u8 rf_rate;

    td_u8 is_dual_module;
    td_u8 tx_power;
    td_u8 modem_type;
    td_u8 white_list_mode;

    td_u8 sta_type;
    td_u8 recover_sg_freq;
    td_s16 correction_voltage;

    td_u32 main_network_nid;
    td_u32 lock_snid;

    td_u8 belong_cco_mac[6];
    td_u8 history_porxy_flag;
    td_u8 history_level;

    td_u32 mesh_lock_nid;
    td_u8 main_1_mac[6];
    td_u8 main_2_mac[6];
    td_u32 reserved1[4];
} ext_nv_ftm_nm_init_para;

typedef struct {

    td_u32 flash_addr;
    td_u32 flash_size;
    td_u32 crc;
    td_u8 upg_mode;
    td_u8 do_upgrade : 1;
    td_u8 pad1 : 7;
    td_u8 pad2[6];
} ext_upg_mode_nv;

typedef struct {
    td_u32 magic;
    td_u8 cur_times;
    td_u8 dst_times;
    td_u8 data[26];
} ext_nv_ftm_upg_extension;

typedef struct {
    td_u32 reserved[32];
} ext_nv_ftm_reserved_id;

typedef struct {
    td_u32 reserved[16];
} ext_nv_ftm_reserved1_id;

typedef struct {
    td_u32 reserved[16];
} ext_nv_ftm_reserved2_id;

typedef struct {
    td_u32 reserved[16];
} ext_nv_ftm_reserved3_id;

typedef struct {
    td_u32 reserved[16];
} ext_nv_ftm_reserved4_id;

typedef struct {
    td_u32 reserved[16];
} ext_nv_ftm_reserved5_id;

typedef struct {
    td_u32 reserved[16];
} ext_nv_ftm_reserved8;

typedef struct {
    td_u32 reserved[16];
} ext_nv_ftm_reserved9;













typedef enum IRQn
{

    NonMaskableInt_IRQn = -14,
    MemoryManagement_IRQn = -12,
    BusFault_IRQn = -11,
    UsageFault_IRQn = -10,
    SVCall_IRQn = -5,
    DebugMonitor_IRQn = -4,
    PendSV_IRQn = -2,
    SysTick_IRQn = -1,
    WatchDog_IRQn = 0,
    Phy_IRQn = 1,
    Chiper_IRQn = 2,
    Ssp0_IRQn = 3,
    I2c_IRQn = 4,
    Uart1_IRQn = 5,
    Uart0_IRQn = 6,
    Timer0_IRQn = 7,
    Timer1_IRQn = 8,
    Timer2_IRQn = 9,
    Timer3_IRQn = 10,
    Timer4_IRQn = 11,
    Timer5_IRQn = 12,
    Gpio_IRQn = 13,
    Sfc_IRQn = 14,
    Spacc_norm_IRQn = 15,
    Ssp1_IRQn = 16,
 IRQ_MAX_NUM = 17
} IRQn_Type;


td_void app_io_init(td_void);
td_void app_main(td_void);

typedef enum {
    EXT_21_UPG_TYPE_NONE = 0,
    EXT_21_UPG_TYPE_KERNEL = 1,
    EXT_21_UPG_TYPE_APP,
    EXT_21_UPG_TYPE_BOOT,
    EXT_21_UPG_TYPE_PARTITION,
} ext_21_upg_type;




typedef struct {
    td_u32 hash_alg : 16;
    td_u32 sign_alg : 6;
    td_u32 sign_param : 10;
    td_u8 signature_1[256];
    td_u8 signature_2[256];
    td_u8 key_n_2[256];
} ext_upg_secure_info;

typedef struct {
    td_u32 attribute_compress : 1;
    td_u32 attribute_pad : 31;
    td_u32 offset;
    td_u32 compress_size;
} ext_21_upg_head_section;

typedef struct {
    td_u16 min_id;
    td_u16 max_id;
} ext_21_upg_head_product;




typedef struct {
    td_u32 chip_magic;
    td_u8 check_sum[32];
    td_u32 file_len;
    td_u32 ver_magic;
    td_u32 attribute_pad;

    td_u16 manufactuer_code;
    td_u8 struct_type;
    td_u8 file_type;
    ext_21_upg_head_product product_list[2];

    td_u8 section_count;
    td_u8 pad[3];

    td_u32 section_list_offset;
    td_u32 section_list_size;

    td_u32 secure_info_offset;
    td_u32 secure_info_size;

    td_u32 partition_info_offset;
    td_u32 partition_info_size;

    ext_partition_ver_info partion_ver;





} ext_21_upg_head;

typedef struct {
    td_u32 head_before_offset;
    td_u32 head_end_magic;
} ext_21_upg_tail;

typedef struct {
    td_u32 mode_magic;
    td_u16 pad;
    td_u16 upg_magic[3];
    td_u32 head_before_offset;
    td_u32 head_end_magic;
} ext_21_upg_tail_new;



typedef struct {
    td_u32 offset;
    td_u32 size;
    td_u32 check_sum;
} ext_start_tbl_section;

typedef struct {
    td_u32 check_sum;
    td_u32 tbl_len;
    td_u32 ver_magic;
    td_u32 attribute_check_nvfile : 1;
    td_u32 attribute_check_nvfile_ver : 1;
    td_u32 attribute_pad_1 : 30;
    td_u8 tbl_type;
    td_u8 pad[3];
    td_u32 info_2_kernel;
    td_u32 secure_info_offset;
    td_u32 secure_info_size;
    ext_start_tbl_section section[1];
} ext_start_tbl;


typedef enum {
    EXT_START_UPG_REASON_NONE,
    EXT_START_UPG_REASON_TBL_ERR,
    EXT_START_UPG_REASON_TBL_CODE1_ERR,
    EXT_START_UPG_REASON_TBL_CODE2_ERR,
    EXT_START_UPG_REASON_TBL_NV_ERR,
    EXT_START_UPG_REASON_TBL_NV_NOT_MATCH,
    EXT_START_UPG_REASON_UPG,
} ext_start_upg_reason;

td_u32 uapi_upg_nv_clear_mode(td_void);
td_u32 uapi_upg_get_start_upg_mode(td_u8 *start_upg_mode);
td_u32 uapi_upg_restart_get_file_info(td_u32 *flash_addr, td_u32 *flash_size, td_u32 *crc);
